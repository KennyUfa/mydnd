# Generated by Django 5.1.4 on 2025-04-03 12:18

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Ability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Background',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('description', models.TextField(verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Предыстория',
                'verbose_name_plural': 'Предыстории',
            },
        ),
        migrations.CreateModel(
            name='BaseClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название класса')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание класса')),
                ('hit_dice', models.CharField(blank=True, max_length=10, null=True, verbose_name='Кость хитов')),
                ('hit_at_first_level', models.CharField(blank=True, max_length=10, null=True, verbose_name='Хиты на первом уровне')),
                ('hit_at_next_level', models.CharField(blank=True, max_length=100, null=True, verbose_name='Хиты на следующих уровнях')),
                ('possession_armor', models.CharField(blank=True, max_length=100, null=True, verbose_name='Владение доспехами')),
                ('possession_weapon', models.CharField(blank=True, max_length=100, null=True, verbose_name='Владение оружием')),
                ('possession_instrument', models.CharField(blank=True, max_length=100, null=True, verbose_name='Владение инструментами')),
                ('saving_throws', models.CharField(blank=True, max_length=100, null=True, verbose_name='Спасброски')),
                ('class_skills', models.CharField(blank=True, max_length=100, null=True, verbose_name='Классовые навыки')),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Lineament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100)),
                ('description', models.CharField(blank=True, max_length=4000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='LineamentModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MagicSchool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Школа заклинаний',
                'verbose_name_plural': 'Школы заклинаний',
            },
        ),
        migrations.CreateModel(
            name='MiniDescriptions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название небольшого описания класса')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
            ],
        ),
        migrations.CreateModel(
            name='Properties',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('description', models.CharField(blank=True, default='', max_length=2000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProtectStateModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('protect_state_strength', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(2), django.core.validators.MinValueValidator(1)])),
                ('protect_state_dexterity', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(2), django.core.validators.MinValueValidator(1)])),
                ('protect_state_constitution', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(2), django.core.validators.MinValueValidator(1)])),
                ('protect_state_intelligence', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(2), django.core.validators.MinValueValidator(1)])),
                ('protect_state_wisdom', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(2), django.core.validators.MinValueValidator(1)])),
                ('protect_state_charisma', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(2), django.core.validators.MinValueValidator(1)])),
            ],
        ),
        migrations.CreateModel(
            name='Race',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название расы')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Раса',
                'verbose_name_plural': 'Расы',
            },
        ),
        migrations.CreateModel(
            name='RaceBackground',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название особенности')),
                ('description', models.TextField(verbose_name='Описание особенности')),
            ],
            options={
                'verbose_name': 'Историческая особенность расы',
                'verbose_name_plural': 'Исторические особенности рас',
            },
        ),
        migrations.CreateModel(
            name='Rarity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Skills',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('strength', models.PositiveSmallIntegerField(blank=True, default=10, verbose_name='Сила')),
                ('dexterity', models.PositiveSmallIntegerField(blank=True, default=10, verbose_name='Ловкость')),
                ('constitution', models.PositiveSmallIntegerField(blank=True, default=10, verbose_name='Телосложение')),
                ('intelligence', models.PositiveSmallIntegerField(blank=True, default=10, verbose_name='Интеллект')),
                ('wisdom', models.PositiveSmallIntegerField(blank=True, default=10, verbose_name='Мудрость')),
                ('charisma', models.PositiveSmallIntegerField(blank=True, default=10, verbose_name='Харизма')),
            ],
        ),
        migrations.CreateModel(
            name='SkillStateModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('athletics', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(3), django.core.validators.MinValueValidator(1)])),
                ('acrobatics', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(3), django.core.validators.MinValueValidator(1)])),
                ('sleight_of_hand', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(3), django.core.validators.MinValueValidator(1)])),
                ('stealth', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(3), django.core.validators.MinValueValidator(1)])),
                ('arcana', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(3), django.core.validators.MinValueValidator(1)])),
                ('history', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(3), django.core.validators.MinValueValidator(1)])),
                ('investigation', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(3), django.core.validators.MinValueValidator(1)])),
                ('nature', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(3), django.core.validators.MinValueValidator(1)])),
                ('religion', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(3), django.core.validators.MinValueValidator(1)])),
                ('animal_handling', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(3), django.core.validators.MinValueValidator(1)])),
                ('insight', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(3), django.core.validators.MinValueValidator(1)])),
                ('medicine', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(3), django.core.validators.MinValueValidator(1)])),
                ('perception', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(3), django.core.validators.MinValueValidator(1)])),
                ('survival', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(3), django.core.validators.MinValueValidator(1)])),
                ('deception', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(3), django.core.validators.MinValueValidator(1)])),
                ('intimidation', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(3), django.core.validators.MinValueValidator(1)])),
                ('performance', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(3), django.core.validators.MinValueValidator(1)])),
                ('persuasion', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(3), django.core.validators.MinValueValidator(1)])),
            ],
        ),
        migrations.CreateModel(
            name='SmallFeaturesRace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название особенности')),
                ('description', models.TextField(verbose_name='Описание особенности')),
            ],
            options={
                'verbose_name': 'Общие особенности расы',
                'verbose_name_plural': 'Общие особенности расы',
            },
        ),
        migrations.CreateModel(
            name='SpellSlotLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveIntegerField(default=0, unique=True, validators=[django.core.validators.MaxValueValidator(9), django.core.validators.MinValueValidator(0)])),
                ('count', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(12), django.core.validators.MinValueValidator(0)])),
                ('used', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(12), django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'verbose_name': 'Уровень ячеек заклинаний',
                'verbose_name_plural': 'Уровни ячеек заклинаний',
            },
        ),
        migrations.CreateModel(
            name='SubType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TypeItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='WorldOutlook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100)),
                ('description', models.CharField(blank=True, max_length=4000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Archetype',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('character_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='archetypes', to='dnd.baseclass')),
            ],
        ),
        migrations.CreateModel(
            name='Bond',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название привязанности')),
                ('background', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bonds', to='dnd.background', verbose_name='Предыстория')),
            ],
            options={
                'verbose_name': 'Привязанность',
                'verbose_name_plural': 'Привязанности',
            },
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_champion', models.CharField(blank=True, default='Безымянный герой', max_length=100)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('level', models.IntegerField(blank=True, default=1)),
                ('experience', models.IntegerField(blank=True, default=0)),
                ('max_hit', models.PositiveSmallIntegerField(default=0)),
                ('temp_hit', models.PositiveSmallIntegerField(default=0)),
                ('current_hit', models.PositiveSmallIntegerField(default=0)),
                ('possession_bonus', models.PositiveSmallIntegerField(default=2, verbose_name='bonus')),
                ('inspiration', models.PositiveSmallIntegerField(default=0)),
                ('protection_class', models.PositiveSmallIntegerField(default=10, verbose_name='Класс защиты')),
                ('speed', models.PositiveSmallIntegerField(default=30, verbose_name='speed_ch')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='account', to=settings.AUTH_USER_MODEL)),
                ('archetype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dnd.archetype', verbose_name='Архетип')),
                ('background', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dnd.background', verbose_name='Предыстория')),
                ('champion_class', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dnd.baseclass')),
                ('lineament', models.ManyToManyField(blank=True, to='dnd.lineamentmodel', verbose_name='Черты')),
                ('protect_state', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dnd.protectstatemodel', verbose_name='Спасброски')),
                ('race', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dnd.race')),
                ('skills', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dnd.skills', verbose_name='Характеристики')),
                ('skill_state', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dnd.skillstatemodel', verbose_name='Владения навыками')),
            ],
            options={
                'verbose_name': 'пресонаж',
                'verbose_name_plural': 'персонажи',
            },
        ),
        migrations.CreateModel(
            name='CharacterSpellSlots',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('character', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='spell_slots', to='dnd.character', verbose_name='Персонаж')),
            ],
            options={
                'verbose_name': 'Ячейки заклинаний персонажа',
                'verbose_name_plural': 'Ячейки заклинаний персонажей',
            },
        ),
        migrations.CreateModel(
            name='CharacterSpellSlotLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('spells', models.JSONField(blank=True, default=list, null=True)),
                ('character_spell_slots', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='slot_levels', to='dnd.characterspellslots', verbose_name='Ячейки заклинаний персонажа')),
                ('spell_slot_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='character_slots', to='dnd.spellslotlevel', verbose_name='Уровень ячейки')),
            ],
            options={
                'verbose_name': 'Уровень ячеек заклинаний персонажа',
                'verbose_name_plural': 'Уровни ячеек заклинаний персонажей',
            },
        ),
        migrations.CreateModel(
            name='CustomAbility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('custom_description', models.TextField(blank=True, null=True)),
                ('hide_original', models.BooleanField(default=False)),
                ('hide_custom', models.BooleanField(default=True)),
                ('ability', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='custom_versions', to='dnd.ability')),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='custom_abilities', to='dnd.character')),
            ],
        ),
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название особенности')),
                ('description', models.TextField(verbose_name='Описание')),
                ('has_choice', models.BooleanField(default=False, verbose_name='Есть выбор')),
                ('background', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='features', to='dnd.background', verbose_name='Предыстория')),
            ],
            options={
                'verbose_name': 'Особенность предыстории',
                'verbose_name_plural': 'Особенности предыстории',
            },
        ),
        migrations.CreateModel(
            name='FeatureOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название варианта')),
                ('feature', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='dnd.feature', verbose_name='Особенность')),
            ],
            options={
                'verbose_name': 'Вариант особенности',
                'verbose_name_plural': 'Варианты особенностей',
            },
        ),
        migrations.CreateModel(
            name='Flaw',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название слабости')),
                ('background', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flaws', to='dnd.background', verbose_name='Предыстория')),
            ],
            options={
                'verbose_name': 'Слабость',
                'verbose_name_plural': 'Слабости',
            },
        ),
        migrations.CreateModel(
            name='Ideal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название идеала')),
                ('background', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ideals', to='dnd.background', verbose_name='Предыстория')),
            ],
            options={
                'verbose_name': 'Идеал',
                'verbose_name_plural': 'Идеалы',
            },
        ),
        migrations.CreateModel(
            name='InventoryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='my_items', to='dnd.character')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.item')),
            ],
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveIntegerField()),
                ('proficiency_bonus', models.PositiveIntegerField()),
                ('archetype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='levels', to='dnd.archetype')),
                ('class_obj', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='levels', to='dnd.baseclass')),
            ],
        ),
        migrations.AddField(
            model_name='ability',
            name='level_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='abilities', to='dnd.level'),
        ),
        migrations.CreateModel(
            name='CustomLineament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('custom_description', models.TextField(blank=True, null=True, verbose_name='Пользовательское описание')),
                ('hide_original', models.BooleanField(default=False, verbose_name='Скрыть оригинальный текст')),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lineament_custom', to='dnd.character')),
                ('lineament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lineament_custom', to='dnd.lineamentmodel')),
            ],
        ),
        migrations.AddField(
            model_name='baseclass',
            name='mini_descriptions',
            field=models.ManyToManyField(related_name='mini_descriptions', to='dnd.minidescriptions'),
        ),
        migrations.AddField(
            model_name='race',
            name='background',
            field=models.ManyToManyField(blank=True, related_name='race', to='dnd.racebackground', verbose_name='История рассы'),
        ),
        migrations.CreateModel(
            name='CustomRaceBackground',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('custom_description', models.TextField(blank=True, null=True, verbose_name='Пользовательское описание')),
                ('hide_original', models.BooleanField(default=False)),
                ('hide_custom', models.BooleanField(default=True)),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='custom_history_race_backgrounds', to='dnd.character')),
                ('race_background', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='custom_history_race_backgrounds', to='dnd.racebackground')),
            ],
            options={
                'verbose_name': 'Пользовательская историческая особенность расы',
                'verbose_name_plural': 'Пользовательские исторические особенности рас',
            },
        ),
        migrations.AddField(
            model_name='item',
            name='rarity',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='dnd.rarity'),
        ),
        migrations.CreateModel(
            name='SelectedFeatureOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='selected_feature_options', to='dnd.character', verbose_name='Персонаж')),
                ('feature', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='selected_options', to='dnd.feature', verbose_name='Особенность')),
                ('option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='selected_by', to='dnd.featureoption', verbose_name='Выбранный вариант')),
            ],
            options={
                'verbose_name': 'Выбранный вариант особенности',
                'verbose_name_plural': 'Выбранные варианты особенностей',
            },
        ),
        migrations.CreateModel(
            name='SkillsProficiency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('skills_proficiency', models.TextField(blank=True, null=True)),
                ('background_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skill_proficiencies', to='dnd.background')),
            ],
        ),
        migrations.AddField(
            model_name='race',
            name='features',
            field=models.ManyToManyField(blank=True, related_name='race', to='dnd.smallfeaturesrace', verbose_name='Особенности'),
        ),
        migrations.CreateModel(
            name='CustomSmallFeaturesRace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('custom_description', models.TextField(blank=True, null=True, verbose_name='Пользовательское описание')),
                ('hide_original', models.BooleanField(default=False)),
                ('hide_custom', models.BooleanField(default=True)),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='custom_features', to='dnd.character')),
                ('feature', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='custom_features', to='dnd.smallfeaturesrace')),
            ],
            options={
                'verbose_name': 'Пользовательская общая особенность расы',
                'verbose_name_plural': 'Пользовательские общие особенности рас',
            },
        ),
        migrations.CreateModel(
            name='SpecificColumn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('value', models.JSONField()),
                ('archetype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='specific_columns', to='dnd.archetype')),
                ('class_obj', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='specific_columns', to='dnd.baseclass')),
            ],
        ),
        migrations.CreateModel(
            name='Spell',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.CharField(max_length=100, verbose_name='ссылка')),
                ('name', models.CharField(max_length=100, verbose_name='название')),
                ('time_cast', models.CharField(max_length=200, verbose_name='время накладывания')),
                ('distance', models.CharField(max_length=100, verbose_name='дистанция')),
                ('components', models.CharField(max_length=400, verbose_name='компоненты')),
                ('timing', models.CharField(max_length=100, verbose_name='Длительность')),
                ('origin', models.CharField(blank=True, max_length=100, null=True, verbose_name='источник')),
                ('instruction', models.TextField(verbose_name='описание')),
                ('level', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(9)])),
                ('archetype', models.ManyToManyField(blank=True, related_name='archetype_spells', to='dnd.archetype')),
                ('class_actor', models.ManyToManyField(blank=True, related_name='class_spells', to='dnd.baseclass')),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dnd.magicschool')),
            ],
            options={
                'verbose_name': 'Заклинание',
                'verbose_name_plural': 'Заклинания',
                'ordering': ['level', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SpellSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slots', models.JSONField()),
                ('archetype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spell_slots', to='dnd.archetype')),
                ('class_obj', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spell_slots', to='dnd.baseclass')),
            ],
        ),
        migrations.AddField(
            model_name='characterspellslots',
            name='levels',
            field=models.ManyToManyField(through='dnd.CharacterSpellSlotLevel', to='dnd.spellslotlevel', verbose_name='Уровни ячеек'),
        ),
        migrations.CreateModel(
            name='SubRace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название подвида')),
                ('description', models.TextField(verbose_name='Описание')),
                ('background', models.ManyToManyField(related_name='sub_races_backgrounds', to='dnd.racebackground', verbose_name='История подвида')),
                ('features', models.ManyToManyField(related_name='sub_race', to='dnd.smallfeaturesrace', verbose_name='Особенности подвида')),
                ('race', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sub_race', to='dnd.race', verbose_name='Основная раса')),
            ],
            options={
                'verbose_name': 'Подвид',
                'verbose_name_plural': 'Подвиды',
            },
        ),
        migrations.AddField(
            model_name='character',
            name='sub_race',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dnd.subrace'),
        ),
        migrations.CreateModel(
            name='MagicItems',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('homebrew', models.BooleanField(default=False)),
                ('price', models.CharField(blank=True, default='-', max_length=200, null=True)),
                ('source', models.CharField(blank=True, default='-', max_length=200, null=True)),
                ('customization', models.BooleanField(default=False)),
                ('description', models.CharField(blank=True, default='-', max_length=3000, null=True)),
                ('detailCustamization', models.CharField(blank=True, default='-', max_length=200, null=True)),
                ('detailType', models.CharField(blank=True, default='-', max_length=200, null=True)),
                ('item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='magic_item', to='dnd.item')),
                ('sub_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='magic_item_type', to='dnd.subtype')),
            ],
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('homebrew', models.BooleanField(default=False)),
                ('price', models.CharField(blank=True, default='-', max_length=200, null=True)),
                ('source', models.CharField(blank=True, default='-', max_length=200, null=True)),
                ('weight', models.CharField(blank=True, default='-', max_length=100, null=True)),
                ('description', models.CharField(blank=True, default='-', max_length=3000, null=True)),
                ('item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='equipment', to='dnd.item')),
                ('sub_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='equipment', to='dnd.subtype')),
            ],
        ),
        migrations.CreateModel(
            name='Armor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('homebrew', models.BooleanField(default=False)),
                ('disadvantage', models.BooleanField(default=False)),
                ('armore', models.CharField(blank=True, max_length=100, null=True)),
                ('duration', models.CharField(blank=True, max_length=100, null=True)),
                ('price', models.CharField(blank=True, max_length=200, null=True)),
                ('weight', models.CharField(blank=True, default='', max_length=100, null=True)),
                ('source', models.CharField(blank=True, max_length=200, null=True)),
                ('description', models.CharField(blank=True, max_length=3000, null=True)),
                ('requirement', models.CharField(blank=True, max_length=10, null=True)),
                ('item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='armor', to='dnd.item')),
                ('sub_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='armor', to='dnd.subtype')),
            ],
        ),
        migrations.CreateModel(
            name='Trait',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название черты')),
                ('background', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='traits', to='dnd.background', verbose_name='Предыстория')),
            ],
            options={
                'verbose_name': 'Черта характера',
                'verbose_name_plural': 'Черты характера',
            },
        ),
        migrations.CreateModel(
            name='SelectedOrigin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bond', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='selected_by', to='dnd.bond', verbose_name='Выбранная привязанность')),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='selected_origin_options', to='dnd.character', verbose_name='Выбор предыстории')),
                ('flaw', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='selected_by', to='dnd.flaw', verbose_name='Выбранная слабость')),
                ('ideal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='selected_by', to='dnd.ideal', verbose_name='Выбранный идеал')),
                ('trait', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='selected_by', to='dnd.trait', verbose_name='Выбранная черта')),
            ],
        ),
        migrations.AddField(
            model_name='item',
            name='type',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='dnd.typeitem'),
        ),
        migrations.CreateModel(
            name='Weapon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('homebrew', models.BooleanField(default=False)),
                ('damage', models.CharField(blank=True, max_length=10, null=True)),
                ('damage_type', models.CharField(blank=True, max_length=200, null=True)),
                ('price', models.CharField(blank=True, max_length=200, null=True)),
                ('weight', models.CharField(blank=True, default='', max_length=100, null=True)),
                ('source', models.CharField(blank=True, max_length=200, null=True)),
                ('description', models.CharField(blank=True, max_length=3000, null=True)),
                ('special', models.CharField(blank=True, max_length=3000, null=True)),
                ('item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='weapon', to='dnd.item')),
                ('properties', models.ManyToManyField(blank=True, to='dnd.properties')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dnd.subtype')),
            ],
        ),
        migrations.AddField(
            model_name='character',
            name='world_outlook',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dnd.worldoutlook'),
        ),
    ]
